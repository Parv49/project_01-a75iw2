name: Frontend CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['src/web/**']
  pull_request:
    branches: [main, develop]
    paths: ['src/web/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  NODE_VERSION: '18.x'
  DOCKER_IMAGE: random-word-generator-frontend
  WORKING_DIRECTORY: src/web

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        
      - name: Type check
        run: npm run typecheck

      - name: Run unit tests
        run: npm run test:coverage
        
      - name: Run integration tests
        run: |
          npm install -g playwright
          npx playwright install --with-deps
          npx playwright test

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ${{ env.WORKING_DIRECTORY }}/coverage
          retention-days: 14

  build-and-push:
    name: Build and Push Docker Image
    needs: lint-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,prefix=
            type=ref,event=branch
            type=ref,event=tag

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Verify image
        run: |
          docker pull ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          docker image inspect ${{ fromJSON(steps.meta.outputs.json).tags[0] }}

  deploy:
    name: Deploy
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment:
      name: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name random-word-generator-${{ github.event.inputs.environment || 'development' }}

      - name: Deploy to EKS
        run: |
          kubectl set image deployment/frontend frontend=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          kubectl rollout status deployment/frontend --timeout=300s

      - name: Verify deployment
        run: |
          FRONTEND_URL=$(kubectl get service frontend -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          for i in {1..10}; do
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${FRONTEND_URL})
            if [ $STATUS_CODE -eq 200 ]; then
              echo "Deployment verified successfully"
              exit 0
            fi
            sleep 30
          done
          echo "Deployment verification failed"
          exit 1

      - name: Notify on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "‚ùå Frontend deployment to ${{ github.event.inputs.environment || 'development' }} failed!\nWorkflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}