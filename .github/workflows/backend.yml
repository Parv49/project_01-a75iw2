name: Backend CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'src/backend/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/backend/**'

env:
  NODE_ENV: test
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: src/backend/package-lock.json

      - name: Install dependencies
        working-directory: src/backend
        run: npm ci

      - name: Run linting
        working-directory: src/backend
        run: npm run lint

      - name: Run type checking
        working-directory: src/backend
        run: npm run typecheck

      - name: Run tests
        working-directory: src/backend
        run: npm run test:coverage

  build-and-push:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: src/backend
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/backend:latest
            ${{ secrets.DOCKER_REGISTRY }}/backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/backend:buildcache,mode=max

  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Trigger ArgoCD Sync
        run: curl -X POST ${{ secrets.ARGOCD_WEBHOOK_URL }}