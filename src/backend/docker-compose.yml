version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: wordgen-api
    environment:
      - NODE_ENV=development
      - PORT=3000
      - API_VERSION=v1
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/wordgen
      - REDIS_URL=redis://cache:6379
      - DEBUG=app:*
      - LOG_LEVEL=debug
    volumes:
      - .:/app:delegated
      - node_modules:/app/node_modules
    ports:
      - "3000:3000"
      - "9229:9229"
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    command: npm run dev
    healthcheck:
      test: curl -f http://localhost:3000/api/v1/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - backend
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    container_name: wordgen-db
    environment:
      - POSTGRES_DB=wordgen
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: pg_isready -U postgres -d wordgen
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend
    restart: unless-stopped

  cache:
    image: redis:7-alpine
    container_name: wordgen-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --save 60 1 --loglevel warning
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    name: wordgen-postgres-data
  redis_data:
    name: wordgen-redis-data
  node_modules:
    name: wordgen-node-modules

networks:
  backend:
    name: wordgen-backend
    driver: bridge