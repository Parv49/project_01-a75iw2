apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: word-generator
  labels:
    app: word-generator
    component: cache
    technology: redis
    version: "7.0"
  annotations:
    description: "Redis cluster for word generator application caching"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
spec:
  serviceName: redis-cluster
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: word-generator
      component: cache
  template:
    metadata:
      labels:
        app: word-generator
        component: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      terminationGracePeriodSeconds: 60
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: word-generator
                component: cache
            topologyKey: kubernetes.io/hostname
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsNonRoot: true
      containers:
      - name: redis
        image: redis:7.0-alpine
        command: ["redis-server"]
        args:
        - "/etc/redis/redis.conf"
        - "--protected-mode"
        - "no"
        - "--cluster-enabled"
        - "yes"
        - "--cluster-config-file"
        - "/data/nodes.conf"
        - "--cluster-node-timeout"
        - "5000"
        - "--appendonly"
        - "yes"
        - "--save"
        - "900"
        - "1"
        - "--save"
        - "300"
        - "10"
        - "--save"
        - "60"
        - "10000"
        - "--maxmemory"
        - "3072mb"
        - "--maxmemory-policy"
        - "allkeys-lru"
        - "--tcp-keepalive"
        - "300"
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        - name: cluster
          containerPort: 16379
          protocol: TCP
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        - name: redis-certs
          mountPath: /etc/redis/certs
          readOnly: true
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: word-generator-secrets
              key: REDIS_CREDENTIALS
              optional: false
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-certs
        secret:
          secretName: word-generator-secrets
          items:
          - key: REDIS_CREDENTIALS
            path: redis.crt
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: standard
      resources:
        requests:
          storage: 10Gi